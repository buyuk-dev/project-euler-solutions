// quadratic primes

/*
    This is my original implementation. After I solved this I did some reading
    about Euler's formula and it turns out this problem can be solved without
    any programming at all, by doing manual calculations, which i describe below.

    ==================================================================
    To begin with, lets look at sequences generated by both equations.
    We will clearly see that the second formula generates the same
    numbers, but it generates each one twice, where first part of the sequence
    is the mirror image of the other part. This indicates close relationship
    between both formulas.

    Now we need to do some algebraic operations to find out what exactly is this
    relationship.

    The formula n^2 - 79n + 1601 looks very similar to the square of a difference
    formula: (a-b)^2 = a^2 - 2ab + b^2, but not exactly. Lets try to rewrite it
    a little bit to see what is the difference between those two equations.

    (n^2 - 80n + 40^2) + n + 1

    Now we can apply the square of a difference formula to the expression within
    the brackets, and we will get:

    (n - 40)^2 + n + 1

    This looks very similar to the original Euler's equation n^2 + n + 41.
    How can we transform Euler's equation into our equation? By subtracting
    40 from n;

    (n-40)^2 + (n-40) + 41 = (n-40)^2 + n +1

    So we can now clearly see, that the second equation is the same function
    as original Euler's formula offset by 40 units.

    Now comes the sketchy step, which I do not yet fully understand.
    Lets assume that all quadratic prime generating formula can be written
    in the following way (this is the sketchy part, because i don't know yet
    how to prove this assumption is true).

    (n-p)^2 + (n-p) + 41, for some value of p.

    Expanding the formula we get:

    n^2 - 2np + p^2 + n - p + 41 --> n^2 - n(2p - 1) + p^2 - p + 41

    Substituting a = -(2p - 1), b = (p^2 - p + 41) we get:

    n^2 + an + b

    Which is the generalized formula for quadratic primes from the problem statement.
    Now we can apply the constraints |a|, |b| <= 1000:

    |b| = |p^2 - p + 41| <= 1000
    p^2 - p + 41 >= 0 for all natural values of p.
    p^2 - p + 41 <= 1000
    p(p - 1) <= 959
    31 <= p < 32
    ------------
    p = 31
    
    Now we can calculate a and b from their relation with p:

    a = -(2p - 1) = -2 * 31 + 1 = -61
    b = (p^2 - p + 41) = 31*31 - 31 + 41 = 971
   
    and the solution: a * b = -61 * 971 = -59231
    =============================================
*/

#include <vector>
#include <iostream>

using namespace std;

vector<bool> prime_sieve(int n) {
    vector<bool> isprime(n+1, true);
    isprime[0] = isprime[1] = false;

    int div = 0;
    do {
        while (!isprime[++div]);
        for (int i = 2 * div; i < isprime.size(); i += div) {
            isprime[i] = false;
        }
    } while (div * div <= isprime.size());

    return isprime;
}


int main()
{
    int a_min = -1000, a_max = 1000;
    int b_min = -1000, b_max = 1000;
    int prime_max = 100000;

    auto _is_prime = prime_sieve(prime_max);
    auto is_prime = [&_is_prime](int n) -> bool { return n > 0 && _is_prime[n]; };

    int L = 0, A = 0, B = 0;
    for (int b=b_min; b <= b_max; ++b) {
        if (!is_prime(b)) {
            continue;
        }

        for (int a = a_min; a <= a_max; ++a) {
            int n =1;
            while (is_prime(n*n + a*n + b)) {
                n++;
            }

            if (n > L) {
                L = n;
                A = a;
                B = b;
            }
        }
    }

    cout << A * B << endl;

    return 0;
}
